----------------------------------------------------
                    OAMSIM 
----------------------------------------------------
1) Introduction

OAMSIM can be used to generate CCM packets and send them out of ethernet interface.
The software allows user to create up to 16K MEPs at various MD levels. User can use
CLI commands to create/destroy MEPs. Once a MEP is created, the simulator continuously 
send the CCM packet of the MEP out of network interface. In addition to CCM packet,
user can also generate EDM PDU, but the EDM PDU is not going to effect CCM packet in anyway. 

  
2) Implementation

OAMSIM has 3 files:

a) oam_cli.c : This file parse the CLI commands and executes appropriate function.

b) oam_mep.c : This file has the core logic of MEP creation/destroy, TLV insertion, packet build function etc..

c) oam_tx.c  : This file has network interface driver and also packet transmit function.

OAMSIM transmits CCM packets of configured MEPs out of network interface. The destination mac address of the CCM is 
reserved multicast mac address (01:80:c2:00:xx:xx) and the src mac address would be host's mac address. All the CCM 
packets that are generated by SIM are untagged. User is allowed to configure any number of TLVs to a CCM packet.
While configuring the TLV, it is users responsibility to pass proper TLV type, size and value. 



3) Supported CLI commands:

CLI of the OAMSIM expects exact commands from the user; any typo in the command would result error. Auto tab is not supported.

Below are the CLI commands supported by current version of OAMSIM:

a) config mep mepid <mepid val> md name <md name> level <md level> ma <ma name> assoc-id <association id interval <0-7> (credits <val>)

This command creates MD, MA, MEP, builds the CCM frame and initiates continues transmission of CCM frame. Once the MEP is created,
the commands returns mep interface number which can be used as a reference to the MEP.

mepid    : User can input mep id of any value between 1 and 8191

md name  : Only char string name is supported

md level : 0 - 7 are the supported values

ma       : Only char string name is supported. MA and MD are used to encode MAID. The combined length of MA and MD shouldn't be more than 48bytes.

assoc-id : Proprietary value which is encoded in the destination mac address

Interval : 0 - Disable
           1 - 33.3 ms
           2 - 10   ms
           3 - 100  ms
           4 - 1    sec
           5 - 10   sec
           6 - 1    min
           7 - 10   min

credits  : This is an optional command to configure credits to ccm packet. If the value is 10, only 10 packets are transmitted. If credits are not specified, packet would be continuesly transmitted.  

b) destroy mep intf <mep interface>

This command destroys the above created by config mep... command. The only input to this command is mep interface.

c) config mep intf <mep interface> interval <0-7>

This command allows user to change the CCM transmit time of a MEP.

d) set tlv mep-intf <mep interface> type <type-val> size <size-val> val <value>

This command allows user to configure new TLV or change the value of existing TLV. It's user's responsibility to pass the proper TLV values to the command.

mep-intf    :  Interface ID of the MEP
type        :  TLV type (PORT_STATUS_TLV/INTERFACE_STATUS_TLV...) The value has to be integer.
size        :  Size of the TLV. Value has be integer.
val         :  Value to be configured in the TLV. Intiger or string depending on the TLV type.

e) del tlv mep-intf <mep interface> type <type-value>

This command allows user to delete the existing TLV from CCM packet.

mep-intf     : Interrface ID of the MEP
type         : TLV type

f) send edm mep-intf <mep-interface> duration <in seconds>

This command allows user to send EDM packet out of ethernet interface. When this command is executed, the simulator would send a single EDM PDU of a mep. 

mep-intf     : Interface ID of the MEP
duaration    : This is inserted in EDM PDU TLV and it has nothing to do with transmit interval.

g) show tlv mep-intf <mep interface> 

Displays all the TLVs configured for a given MEP.

h) show status mep intf <mep-interface>

Displays the status of a given MEP.

i) show all meps

Displays the configured MEPs.

j) exit

This command would exit the simulator.


4) Running simulator:

User can compile the simulator by issuing make from OAMSIM home directory. Once the code is compiled (ignore warning messages), oamsim binary is generated. User must run the binary in root mode and pass the interface name as a command line argument. For example, "sudo ./oamsim interface=inteleth0" command would initialize the oam simulator on ethernet interface "inteleth0". Once the simulator is up, CLI is displayed where user can execute commands. 

5) Running simulator with python terminal:
Simulator also supports python3 terminal; to start simulator with python terminal, user has to pass 'py' command line argument while starting the simulator. For example, user can run coomand as follows to run the simulator with python terminal: "sudo ./oamsim interface=<interface name> py" (make sure that python3 is installed in the system). CLI commands can be executed from python terminal by calling tx.send_cmd("<cli command>") routine. For example, to exit the simulator, tx.send_cmd("exit") has to be called from python terminal.  
